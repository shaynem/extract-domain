{"version":3,"file":"extract-domain.modern.modern.mjs","sources":["../index.js"],"sourcesContent":["function throwTypeError(url, opts) {\n    throw new TypeError(\n        'The given URL ' + opts?.verbose\n            ? url\n            : '' + ' is not a ' + opts?.verbose\n            ? 'vaild URL'\n            : 'string' + '. Please verify your string|array.'\n    );\n}\n\nconst endings = ['/', ':', '?', '#'];\nconst starters = ['.', '/', '@'];\n\n/**\n * Options to extract domain.\n * @typedef {({tld: boolean, verbose: boolean})} GetDomainOptions\n */\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n *  - `verbose` output invalid input string\n * @returns {string}\n */\nfunction getDomainFromUrl(url, opts) {\n    if (typeof url !== 'string') {\n        throwTypeError(url.opts);\n    }\n\n    let domainInc = 0;\n    let offsetDomain = 0;\n    let offsetStartSlice = 0;\n    let offsetPath = 0;\n    let len = url.length;\n    let i = 0;\n\n    // Find end offset of domain\n    while (len-- && ++i) {\n        if (domainInc && endings.indexOf(url[i]) > -1) {\n            break;\n        }\n\n        if (url[i] !== '.') {\n            continue;\n        }\n\n        ++domainInc;\n\n        offsetDomain = i;\n    }\n\n    offsetPath = i;\n\n    i = offsetDomain;\n\n    // Find offset before domain name.\n    while (i--) {\n        // Look for sub domain, protocol or basic auth\n        if (starters.indexOf(url[i]) === -1) {\n            continue;\n        }\n\n        offsetStartSlice = i + 1;\n\n        break;\n    }\n\n    if (offsetStartSlice === 0 && offsetPath > 3) {\n        return url;\n    }\n\n    if (offsetStartSlice > 0 && offsetStartSlice < 2) {\n        return '';\n    }\n\n    // Very customized if statement for tlds\n    if (opts.tld) {\n        let offsetStart = 0;\n        const starters = ['/', '@'];\n        let i = offsetDomain;\n\n        while (i--) {\n            if (starters.indexOf(url[i]) > -1) {\n                offsetStart = i + 1;\n\n                break;\n            }\n        }\n\n        try {\n            const psl = require('psl');\n\n            return psl.get(url.slice(offsetStart, offsetPath));\n        } catch (_e) {\n            throw Error(\n                'You must install psl library (https://www.npmjs.com/package/psl) to use `tld` option'\n            );\n        }\n    }\n\n    // Tried several approaches slicing a string. Can't get it any faster than this.\n    return url.slice(offsetStartSlice, offsetPath);\n}\n\n/**\n * @param {string} url\n * @param {GetDomainOptions} opts\n *  - `tld` permit to get Top Level Domain like `*.co.uk`\n *  - `verbose` output invalid input string\n * @returns {string}\n */\nexport default function extractDomain(urls, opts = {}) {\n    if (typeof urls === 'string') {\n        return getDomainFromUrl(urls, opts);\n    } else if (Array.isArray(urls)) {\n        const extractedUrls = [];\n        const len = urls.length;\n        let i = 0;\n\n        for (; i < len; i++) {\n            extractedUrls.push(getDomainFromUrl(urls[i], opts));\n        }\n\n        return extractedUrls;\n    } else {\n        throwTypeError(urls[i], opts);\n    }\n}\n"],"names":["throwTypeError","url","opts","TypeError","getDomainFromUrl","domainInc","offsetDomain","offsetStartSlice","offsetPath","len","length","i","endings","indexOf","starters","tld","offsetStart","_i","require","get","slice","_e","Error","urls","Array","isArray","extractedUrls","push"],"mappings":"AAAA,SAASA,EAAeC,EAAKC,GACzB,MAAUC,IAAAA,UAEAF,EAKb,CAED,QAAgB,CAAC,IAAK,IAAK,IAAK,OACf,CAAC,IAAK,IAAK,KAc5B,SAAAG,EAA0BH,EAAKC,GACR,iBAAfD,GACAD,EAAeC,EAAIC,MAGvB,IAAaG,EAAG,EACZC,EAAe,EACCC,EAAG,EACTC,EAAG,EACVC,EAAGR,EAAIS,OACVC,EAAI,EAGR,KAAOF,OAAWE,KACVN,GAAaO,EAAQC,QAAQZ,EAAIU,KAAO,IAI7B,MAAXV,EAAIU,OAINN,EAEFC,EAAeK,GAQnB,IALAH,EAAaG,EAEbA,EAAIL,EAGGK,KAEH,IAAkC,IAA9BG,EAASD,QAAQZ,EAAIU,IAAzB,CAIAJ,EAAmBI,EAAI,EAEvB,KAJC,CAOL,GAAyB,IAArBJ,GAA0BC,EAAa,EACvC,SAGJ,GAAID,EAAmB,GAAKA,EAAmB,EAC3C,MAAO,GAIX,GAAIL,EAAKa,IAAK,CACV,IAAIC,EAAc,EAClB,MAAMF,EAAW,CAAC,IAAK,KACvB,IAAKG,EAAGX,EAER,KAAOK,KACH,GAAIG,EAASD,QAAQZ,EAAIU,KAAO,EAAG,CAC/BK,EAAcL,EAAI,EAElB,KACH,CAGL,IAGI,OAFYO,QAAQ,OAETC,IAAIlB,EAAImB,MAAMJ,EAAaR,GAKzC,CAJC,MAAOa,GACL,MAAMC,MACF,uFAEP,CACJ,CAGD,OAAOrB,EAAImB,MAAMb,EAAkBC,EACtC,CASc,WAAuBe,EAAMrB,EAAO,CAApC,GACX,GAAoB,iBAAhBqB,EACA,OAAuBnB,EAACmB,EAAMrB,GAC3B,GAAIsB,MAAMC,QAAQF,GAAO,CAC5B,MAAmBG,EAAG,GACbjB,EAAGc,EAAKb,OACjB,IAAIC,EAAI,EAER,KAAOA,EAAIF,EAAKE,IACZe,EAAcC,KAAKvB,EAAiBmB,EAAKZ,GAAIT,IAGjD,OACHwB,CAAA,CACG1B,EAAeuB,EAAKZ,GAE3B"}